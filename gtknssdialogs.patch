--- embed/mozilla/GtkNSSDialogs.cpp.old	2006-11-20 03:49:46.000000000 +0800
+++ embed/mozilla/GtkNSSDialogs.cpp	2007-02-10 14:49:54.000000000 +0800
@@ -390,37 +390,7 @@
                                       const nsACString &targetURL,
                                       nsIX509Cert *cert, PRBool *_retval)
 {
-	char *first, *second, *msg;
-	int res;
-
-	nsString commonName;
-	cert->GetCommonName (commonName);
-
-	NS_ConvertUTF16toUTF8 cCommonName (commonName);
-
-	nsCString cTargetUrl (targetURL);
-
-	first = g_markup_printf_escaped (_("The site “%s” returned security information for "
-					   "“%s”. It is possible that someone is intercepting "
-					   "your communication to obtain your confidential "
-					   "information."),
-					 cTargetUrl.get(), cCommonName.get());
-
-        second = g_markup_printf_escaped (_("You should only accept the security information if you "
-					    "trust “%s” and “%s”."),
-					  cTargetUrl.get(), cCommonName.get());
-	
-	msg = g_strdup_printf ("<span weight=\"bold\" size=\"larger\">%s</span>\n\n%s\n\n%s",
-			       _("Accept incorrect security information?"),
-			       first, second);
- 
-	res = display_cert_warning_box (ctx, cert, msg, NULL, NULL, NULL);
- 
-        g_free (second);
-        g_free (first);
-        g_free (msg);
-
-	*_retval = (res == GTK_RESPONSE_ACCEPT);
+	*_retval = PR_TRUE;
 	return NS_OK;
 }
 
@@ -430,55 +400,8 @@
                                      nsIX509Cert *cert, PRInt16 *outAddType,
                                      PRBool *_retval)
 {
-	gboolean accept_perm = FALSE;
-	char *secondary, *tertiary, *msg;
-	int res;
-
-	nsString commonName;
-	cert->GetCommonName (commonName);
-
-	NS_ConvertUTF16toUTF8 cCommonName (commonName);
-
-	secondary = g_markup_printf_escaped
-		           (_("It was not possible to automatically trust “%s”. "
-			      "It is possible that someone is intercepting your "
-			      "communication to obtain your confidential information."),
-			      cCommonName.get());
-
-        tertiary = g_markup_printf_escaped
-		           (_("You should only connect to the site if you are certain "
-			      "you are connected to “%s”."),
-			    cCommonName.get());
-
-	msg = g_strdup_printf ("<span weight=\"bold\" size=\"larger\">%s</span>\n\n%s\n\n%s",
-			       _("Connect to untrusted site?"),
-			       secondary, tertiary);
- 
-	res = display_cert_warning_box (ctx, cert, msg, 
- 					_("_Trust this security information from now on"),
- 					&accept_perm, _("Co_nnect"));
-        g_free (tertiary);
-        g_free (secondary);
-        g_free (msg);
-
-        if (res != GTK_RESPONSE_ACCEPT)
-	{
-		*_retval = PR_FALSE;
-		*outAddType = UNINIT_ADD_FLAG;
-	}
-	else
-	{
-		if (accept_perm)
-		{
 			*_retval    = PR_TRUE;
 			*outAddType = ADD_TRUSTED_PERMANENTLY;
-		}
-		else
-		{
-			*_retval    = PR_TRUE;
-			*outAddType = ADD_TRUSTED_FOR_SESSION;
-		}
-	}
 
  	return NS_OK;
 }
@@ -490,73 +413,7 @@
 GtkNSSDialogs::ConfirmCertExpired (nsIInterfaceRequestor *ctx,
                                    nsIX509Cert *cert, PRBool *_retval)
 {
-	nsresult rv;
-	PRTime now = PR_Now();
-	PRTime notAfter, notBefore, timeToUse;
-	PRInt64 normalizedTime;
-	time_t t;
-	struct tm tm;
-	char formattedDate[128];
-	char *fdate;
-	const char *primary, *text;
-	char *secondary, *msg;
-
-	*_retval = PR_FALSE;
-	
-	nsCOMPtr<nsIX509CertValidity> validity;
-	rv = cert->GetValidity (getter_AddRefs(validity));
-	if (NS_FAILED(rv)) return rv;
-	
-	rv = validity->GetNotAfter (&notAfter);
-	if (NS_FAILED(rv)) return rv;
-	
-	rv = validity->GetNotBefore (&notBefore);
-	if (NS_FAILED(rv)) return rv;
-	
-	if (LL_CMP(now, >, notAfter))
-	{
-		primary = _("Accept expired security information?");
-		/* Translators: first %s is a hostname, second %s is a time/date */
-		text    = _("The security information for “%s” "
-			    "expired on %s.");
-		timeToUse = notAfter;
-	} 
-	else
-	{
-		primary = _("Accept not yet valid security information?");
-		/* Translators: first %s is a hostname, second %s is a time/date */
-		text    = _("The security information for “%s” isn't valid until %s.");
-		timeToUse = notBefore;
-	}
-	
-	nsString commonName;
-	cert->GetCommonName (commonName);
-
-	NS_ConvertUTF16toUTF8 cCommonName (commonName);
-
-	LL_DIV (normalizedTime, timeToUse, PR_USEC_PER_SEC);
-	LL_L2UI (t, normalizedTime);
-	/* To translators: this a time format that is used while displaying the
-	 * expiry or start date of an SSL certificate, for the format see 
-	 * strftime(3) */
-	strftime (formattedDate, sizeof(formattedDate), _("%a %d %b %Y"), 
-		  localtime_r (&t, &tm));
-	/* FIXME! this isn't actually correct, LC_CTIME codeset could be different than locale codeset! */
-	fdate = g_locale_to_utf8 (formattedDate, -1, NULL, NULL, NULL);
-
-	secondary = g_markup_printf_escaped (text, cCommonName.get(), fdate);
-
-	msg = g_strdup_printf ("<span weight=\"bold\" size=\"larger\">%s</span>\n\n%s\n\n%s",
-			       primary, secondary, 
-			       _("You should ensure that your computer's time is correct."));
-
-	int res = display_cert_warning_box (ctx, cert, msg, NULL, NULL, NULL);
-
-	g_free (fdate);
-	g_free (msg);
-	g_free (secondary);
-
-	*_retval = (res == GTK_RESPONSE_ACCEPT);
+	*_retval = PR_TRUE;
 	
 	return NS_OK;
 }
